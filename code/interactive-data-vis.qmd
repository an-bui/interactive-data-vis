---
title: "Interactive data visualization using Javascript packages"
format: html
---

# Set up
```{r}
# general use
library(here) # file organization
library(tidyverse) # manipulating
library(sf) # reading in spatial data, etc.
library(janitor) # cleaning variable names
library(lterdatasampler) # data source
library(randomcoloR) # random color generator
library(ggbeeswarm) # beeswarm geoms
library(magick)

# Javascript package wrappers
library(leaflet) # interactive map
library(plotly) # interactive plots

```

# Interactive maps

`leaflet` is the go-to package for interactive maps. It's not _super_ for static maps, but for anyone looking to get an interactive map on their dashboard, this is a great option. In this example, we're going to use some data from Niwot Ridge LTER to create a map of vegetation classes, snow surveys, pika locations, and landmarks at the site.  

Here's some cleaning code (we're not going through this step by step):

```{r}
# project extent

project_extent <- st_read(here::here("data", "nwt_project_extent", "shapefiles"), layer = "nwt_project_extent") %>% 
  st_transform(crs = 4326)

# snow survey 

snow2018 <- st_read(here::here("data", "ss2018", "shapefiles"), layer = "ss2018") %>% 
  st_transform(crs = 4326) %>% 
  clean_names() %>% 
  mutate(comments = case_when(
    comments == "NaN" ~ "none",
    TRUE ~ comments
  )) %>% 
  mutate(marker_text = paste(
    "Depth:", snowdepth, "<br>",
    "Time:", sampletime, "<br>",
    "Recorders:", recorders, "<br>",
    "Comments:", comments, "<br>"
  )) 

# vegetation classes 

veg <- st_read(here::here("data", "veg", "shapefiles"), layer = "veg") %>% 
  st_transform(crs = 4326) %>% 
  clean_names() %>% 
  mutate(marker_text = paste(
    "Type:", type, "<br>",
    "Area:", area, "<br>",
    "Perimeter:", perimeter, "<br>"
  )) 

veg_list <- veg %>% 
  pull(type) %>% 
  unique()

colors <- c(
  "#1c6e73", randomColor(count = 23, luminosity = "random"), "#e3e5e6"
)
veg_pal <- colorFactor(colors, domain = veg$type, ordered = TRUE)

# landmarks 

landmarks <- st_read(here::here("data", "nwt_annotation_pnt", "shapefiles"), layer = "nwt_annotation_pnt") %>% 
  st_transform(crs = 4326) %>% 
  clean_names() %>% 
  mutate(marker_text = paste(
    "Name:", name
  )) 

# pikas

pikas <- st_as_sf(x = nwt_pikas, coords = c("utm_easting", "utm_northing")) %>% 
  st_set_crs("+proj=utm +zone=13 +datum=NAD83 +units=m") %>% 
  st_transform("+proj=longlat +datum=WGS84") %>% 
  mutate(marker_text = paste(
    "Date:", date, "<br>",
    "Station:", station, "<br>",
    "Sex:", sex, "<br>"
  ))
```


And here's a map: 

```{r}
map <- leaflet() %>% 
  # base maps
  addProviderTiles(providers$OpenTopoMap, group = "OpenTopoMap") %>%
  
  # map layers: project boundary and vegetation classes
  addPolygons(data = project_extent, color = "#488f32", group = "NWT project extent") %>%
  addPolygons(data = veg, group = "Vegetation", popup = ~marker_text, fillColor = ~veg_pal(type), stroke = FALSE, fillOpacity = 1) %>% 
  
  # markers
  addCircleMarkers(data = snow2018, group = "Snow surveys",
                   color = "lightblue", stroke = FALSE, fillOpacity = 1,
                   popup = ~marker_text,
                   popupOptions = popupOptions(closeOnClick = FALSE)) %>%
  addCircleMarkers(data = landmarks, group = "Landmarks", 
                   color = "yellow", stroke = FALSE, fillOpacity = 1,
                   popup = ~marker_text,  
                   popupOptions = popupOptions(closeOnClick = FALSE)) %>% 
  addCircleMarkers(data = pikas, group = "Pikas", 
                   color = "orange", stroke = FALSE, fillOpacity = 1, 
                   popup = ~marker_text, 
                   popupOptions = popupOptions(closeOnClick = FALSE)) %>%
  
  # layers control
  addLayersControl(
    baseGroups = c("OpenTopoMap"),
    overlayGroups = c("NWT project extent", "Vegetation", "Snow surveys", "Landmarks", "Pikas"),
    options = layersControlOptions(collapsed = TRUE)
  ) %>% 
  
  # legends
  addLegend(values = 1, group = "Snow surveys", position = "bottomleft", labels = "Snow surveys", colors = "lightblue", opacity = 1) %>%
  addLegend(values = 2, group = "Landmarks", position = "bottomleft", labels = "Landmarks", colors = "yellow", opacity = 1) %>% 
  addLegend(values = 3, group = "Pikas", position = "bottomleft", labels = "Pikas", colors = "orange", opacity = 1) %>% 
  
  # scale bar
  addScaleBar(position = "bottomright", options = scaleBarOptions(imperial = FALSE))

map 
```




# Interactive plots 

You can build interactivity into your plots using packages that are essentially wrappers for Javascript: you can get an interactive framework without having to learn a whole new language. 

# Option 1: Turn a `ggplot` object into an interactive graph

The easiest way to build in interactivity is to use `plotly` to get an interactive plot from a `ggplot` object. 

```{r}
elev_gradient <- colorRamp(c("lightblue", "darkblue"), 20)

pika_static <- ggplot(pikas, aes(x = date, y = concentration_pg_g, text = marker_text)) +
  geom_point(aes(color = elev_m, size = concentration_pg_g)) +
  scale_color_gradient(low = "lightblue", high = "darkblue") +
  labs(x = "Date", y = "Concentration (pg/g)", 
       title = "There is no clear relationship between sampling date and hormone concentration.") +
  theme_classic() +
  theme(legend.position = "none",
        text = element_text(family = "Garamond"), 
        axis.text = element_text(size = 12),
        axis.title = element_text(size = 14),
        plot.title = element_text(size = 16),
        plot.title.position = "plot")

pika_static

ggplotly(pika_static,
         tooltip = c("text"), 
         showlegend = FALSE) %>% 
  layout(hoverlabel = list(
    font = list(
      family = "Garamond",
      size = 12
    )
  ))
```


First, some cleaning:
```{r}
maples <- hbr_maples %>% 
  mutate(marker_text = paste(
    "Watershed: ", watershed, "<br>",
    "Elevation: ", elevation, "<br>",
    "Transect: ", transect, "<br>", 
    "Sample: ", sample, "<br>"
  ))

sugarmap <- image_read(here::here("images", "Pbroks13-inaturalist.png")) %>% 
  as.raster()
```


```{r}
fill_palette <- c("Reference" = "#54A866", "W1" = "#F28F16")
shape_palette <- c("Reference" = 21, "W1" = 24)

maples_static <- maples %>% 
  ggplot(aes(text = marker_text)) +
  geom_beeswarm(aes(x = as_factor(year), y = stem_length, fill = watershed, shape = watershed), size = 4, cex = 3) +
  scale_fill_manual(values = fill_palette) +
  scale_shape_manual(values = shape_palette) +
  theme(legend.position = "none") +
  labs(x = "Year", y = "Stem length (cm)", color = "Watershed",
       title = "Sugar maple length is variable, but they tend to grow through time.") +
  facet_grid(~watershed) +
  annotation_raster(sugarmap, xmin = 1, xmax = 1, ymin = 60, ymax = 61) +
  theme_classic() +
  theme(legend.position = "none",
        text = element_text(family = "Garamond"), 
        axis.text = element_text(size = 12),
        axis.title = element_text(size = 14),
        plot.title = element_text(size = 18),
        strip.background = element_blank(),
        strip.text = element_text(size = 16),
        plot.title.position = "plot")

maples_static

inter <- ggplotly(maples_static,
                  tooltip = c("text"), 
         showlegend = FALSE) %>% 
    layout(hoverlabel = list(
    font = list(
      family = "Garamond",
      size = 12
    )
  ))

inter
```






